pkgname=llvm-runtime
pkgver=17.0.6
pkgrel=1
arch=('x86_64')
url="https://llvm.org/"
license=('custom:Apache 2.0 with LLVM Exception')
pkgdesc="Collection of modular and reusable compiler and toolchain technologies"

provides=('llvm' "llvm=${pkgver}" 'llvm-libs' 'llvm-ocaml' 'libc++' 'libc++abi' 'libc++experimental')

replaces=('llvm' 'llvm-libs' 'llvm-ocaml'
  'libc++' 'libc++abi' 'libc++experimental')

conflicts=('llvm' 'llvm-libs' 'llvm-ocaml'
  'llvm-git' 'llvm-libs-git' 'llvm-ocaml-git' 'libc++'
  'libc++abi' 'libc++experimental')

depends=('libelf' 'libffi' 'libedit' 'libxml2' 'ncurses')
_ocaml_ver=4.14.0
makedepends=(
  'git' 'ninja' 'cmake'
  "ocaml>=${_ocaml_ver}" 'ocaml-ctypes' 'ocaml-findlib'
  'python-setuptools' 'python-psutil' 'python-sphinx'
  'python-recommonmark' 'ocaml-stdlib-shims'
)
makedepends_x86_64=('lib32-gcc-libs')
_commit=6009708b4367171ccdbf4b5905cb6a803753fe18
source=(
  "llvm-project::git+https://github.com/llvm/llvm-project.git#commit=${_commit}"
  'llvm-config.h'
)

sha256sums=('SKIP'
  '597dc5968c695bbdbb0eac9e8eb5117fcd2773bc91edf5ec103ecffffab8bc48')

options=('staticlibs' '!lto' '!debug')

_extra_build_flags=(
  -DLLVM_ENABLE_LTO=Thin 
  -DCMAKE_C_COMPILER="$CC" 
  -DCMAKE_CXX_COMPILER="$CXX" 
  -DLLVM_USE_LINKER=lld
  -DCMAKE_SKIP_RPATH=ON
  )

_rpatch() {

  echo -e "\E[1;33m Revert patch: ${1}\E[0m"
  patch --forward --reverse --strip=1 --input="${srcdir:?}/${1}"

}

_patch() {

  echo -e "\E[1;33m Apply patch: ${1}\E[0m"
  patch --forward --strip=1 --input="${srcdir:?}/${1}"

}

prepare() {

  cd "${srcdir:?}/llvm-project" || (
    echo -e "\E[1;31mCan't cd to ${srcdir}/llvm-project directory! Prepare Failed! \E[0m"
    exit 1
  )
}

build() {

  cd "${srcdir:?}/llvm-project" || (
    echo -e "\E[1;31mCan't cd to ${srcdir}/llvm-project directory! Build Failed! \E[0m"
    exit 1
  )

  export CFLAGS="$CFLAGS -fno-plt -fomit-frame-pointer -fno-semantic-interposition"
  export CXXFLAGS="$CFLAGS -fno-plt -fomit-frame-pointer -fno-semantic-interposition"

  cmake -S llvm -B build -G Ninja \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_SKIP_RPATH=ON \
    -DLLVM_BUILD_LLVM_DYLIB=ON \
    -DLLVM_LINK_LLVM_DYLIB=ON \
    -DLLVM_INSTALL_UTILS=ON \
    -DLLVM_ENABLE_RTTI=ON \
    -DLLVM_ENABLE_FFI=ON \
    -DLLVM_BUILD_TESTS=OFF \
    -DLLVM_BUILD_DOCS=OFF \
    -DLLVM_ENABLE_SPHINX=OFF \
    -DLLVM_ENABLE_DOXYGEN=OFF \
    -DSPHINX_WARNINGS_AS_ERRORS=OFF \
    -DLLVM_BINUTILS_INCDIR=/usr/include \
    -DLLVM_ENABLE_PROJECTS="libclc" \
    -DLLVM_ENABLE_RUNTIMES="libcxx;libcxxabi" \
    "${_extra_build_flags[@]}"
    ninja -C build
    
  ninja -C build ocaml_doc


}

check() {

  cd "${srcdir:?}/llvm-project" || (
    echo -e "\E[1;31mCan't cd to ${srcdir}/llvm-project/build directory! Check Failed! \E[0m"
    exit 1
  )
}

_python_optimize() {
  python -m compileall "$@"
  python -O -m compileall "$@"
  python -OO -m compileall "$@"
}

package() {

  cd "${srcdir:?}/llvm-project" || (
    echo -e "\E[1;31mCan't cd to ${srcdir}/llvm-project directory! Package Failed! \E[0m"
    exit 1
  )

  DESTDIR="${pkgdir:?}" ninja -C build install

  pushd llvm/utils/lit || (
    echo -e "\E[1;31mpushd utils/lit - Package Failed! \E[0m"
    exit 1
  )

  python setup.py install --root="${pkgdir:?}" -O1
  popd || (
    echo -e "\E[1;31mpopd - Package Failed!  \E[0m"
    exit 1
  )

  if [[ "${CARCH:?}" == "x86_64" ]]; then
    mv "${pkgdir:?}/usr/include/llvm/Config/llvm-config"{,-64}.h
    cp "${srcdir:?}/llvm-config.h" "${pkgdir:?}/usr/include/llvm/Config/llvm-config.h"
  fi

  # Symlink LLVMgold.so from /usr/lib/bfd-plugins
  # https://bugs.archlinux.org/task/28479
  mkdir -p "${pkgdir:?}/usr/lib/bfd-plugins"
  ln -s ../LLVMgold.so "${pkgdir:?}/usr/lib/bfd-plugins/LLVMgold.so"
  cp -a llvm/bindings/python/llvm "${pkgdir:?}/${site_packages}/"
  cp -a clang/bindings/python/clang "${pkgdir:?}/${site_packages}/"

  # Symlink all files inside x86_64-pc-linux-gnu to /usr/lib/
  pushd ${pkgdir:?}/usr/lib/
  ln -s x86_64-pc-linux-gnu/* .
  popd

  _python_optimize "${pkgdir:?}/usr/share" "${pkgdir:?}/${site_packages}"

  # Licenses
  install -Dm644 "${srcdir:?}/llvm-project/llvm/LICENSE.TXT" "${pkgdir:?}/usr/share/licenses/${pkgname}/llvm-LICENSE"

  # Fallback for llvm 16
  # _llvm_libs=(libLLVM-16.so libLTO.so.16 libRemarks.so.16 libclang.so.16.0.6 libclang-cpp.so.16)
  # for lib in "${_llvm_libs[@]}"; do
  #   if [[ ! -e "${pkgdir:?}/usr/lib/${lib:?}" ]]; then
  #     echo "- Copy ${lib:?}"
  #     install -Dm644 "/usr/lib/${lib:?}" "${pkgdir:?}/usr/lib/${lib:?}"
  #   else
  #     echo "- ${lib:?} exist"
  #   fi
  # done

  # if [[ ! -e "${pkgdir:?}/usr/lib/libLLVM-16.0.6.so" ]]; then
  #   echo "- Copy libLLVM-16.0.1.so"
  #   ln -s /usr/lib/libLLVM-16.so "${pkgdir:?}/usr/lib/libLLVM-16.0.6.so"
  # else
  #   echo "- libLLVM-16.0.6.so exist"
  # fi
}